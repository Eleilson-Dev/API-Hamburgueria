// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  password String?
  image    String?
  role     String
  orders   Order[]
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  status     String
  orderItems OrderItem[]
  priceOrder Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
}

model Category {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt
  Hamburguer Hamburguer[]
  Savory     Savory[]
  Pizza      Pizza[]
  Cake       Cake[]
  Soda       Soda[]
  Juice      Juice[]
}

model Hamburguer {
  id           Int         @id @default(autoincrement())
  name         String
  description  String?
  price        Float
  ingredients  String[]
  imageUrl     String
  size         String
  categoryName String
  category     Category    @relation(fields: [categoryName], references: [name], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  visibility   Boolean     @default(true)
  updatedAt    DateTime    @default(now()) @updatedAt
  OrderItem    OrderItem[]
}

model Savory {
  id           Int         @id @default(autoincrement())
  name         String
  description  String?
  price        Float
  ingredients  String[]
  imageUrl     String
  categoryName String
  category     Category    @relation(fields: [categoryName], references: [name], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  visibility   Boolean     @default(true)
  updatedAt    DateTime    @default(now()) @updatedAt
  OrderItem    OrderItem[]
}

model Pizza {
  id           Int         @id @default(autoincrement())
  name         String
  description  String?
  price        Float
  ingredients  String[]
  imageUrl     String
  size         String
  categoryName String
  category     Category    @relation(fields: [categoryName], references: [name], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  visibility   Boolean     @default(true)
  updatedAt    DateTime    @default(now()) @updatedAt
  OrderItem    OrderItem[]
}

model Cake {
  id           Int         @id @default(autoincrement())
  name         String
  description  String?
  price        Float
  ingredients  String[]
  imageUrl     String
  visibility   Boolean     @default(true)
  categoryName String
  category     Category    @relation(fields: [categoryName], references: [name], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  OrderItem    OrderItem[]
}

model Soda {
  id           Int         @id @default(autoincrement())
  name         String
  price        Float
  imageUrl     String
  size         String
  categoryName String
  category     Category    @relation(fields: [categoryName], references: [name], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  visibility   Boolean     @default(true)
  updatedAt    DateTime    @default(now()) @updatedAt
  OrderItem    OrderItem[]
}

model Juice {
  id           Int         @id @default(autoincrement())
  name         String
  price        Float
  imageUrl     String
  size         String
  categoryName String
  category     Category    @relation(fields: [categoryName], references: [name], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  visibility   Boolean     @default(true)
  updatedAt    DateTime    @default(now()) @updatedAt
  OrderItem    OrderItem[]
}

model OrderItem {
  id           Int         @id @default(autoincrement())
  order        Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      Int
  quantity     Int
  hamburguer   Hamburguer? @relation(fields: [hamburguerId], references: [id])
  hamburguerId Int?
  Soda         Soda?       @relation(fields: [sodaId], references: [id])
  sodaId       Int?
  Pizza        Pizza?      @relation(fields: [pizzaId], references: [id])
  pizzaId      Int?
  Savory       Savory?     @relation(fields: [savoryId], references: [id])
  savoryId     Int?
  Juice        Juice?      @relation(fields: [juiceId], references: [id])
  juiceId      Int?
  Cake         Cake?       @relation(fields: [cakeId], references: [id])
  cakeId       Int?
}
